#
# dotnet-publish-nuget, by Irving Decarlo
#
# Automatically publishes all .csproj files that were modified by the push that invoked the workflow.
# Skips .NET setup if no .csproj files were modified by any of the push's commits.
# Skips duplicated NuGet packages that already exist in nuget.org if the version hasn't changed.
# Skips projects that have a .pubignore file in their directory.
#
# Parameters/Repository Variables and Secrets needed:
# secrets.NUGET_API_KEY: Your nuget.org token for pushing NuGet packages.
# The .yml may be changed further according to your needs, such as a specific OS version or .NET version.
#

name: Publish NuGet Packages

on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get modified .csproj files
        id: modified-projects
        uses: irvingdecarlo/get-commit-files@v1
        with:
          commits-json: ${{ toJson(github.event.commits) }}
          git-branch: ${{ github.ref_name }}
          file-type: ".csproj"
          file-ignore: ".pubignore"

      - name: Setup .NET
        if: steps.modified-projects.outputs.modified-files != ''
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build and pack modified projects
        if: steps.modified-projects.outputs.modified-files != ''
        run: |
          # Builds and packs all modified projects.
          echo -e "\033[36mProcessing modified .csproj files...\033[0m"
          FAILED_PROJECTS=""
          MODIFIED_PROJECTS=$(echo ${{ steps.modified-projects.outputs.modified-files }} | tr ',' '\n')
          for project in $MODIFIED_PROJECTS; do
            echo -e "\033[35mBuilding and packing project: $project\033[0m"
            dotnet workload restore $project
            if dotnet pack --configuration Release --output ./nupkg $project; then
              echo -e "\033[32mProject $project packed successfully.\033[0m"
            else
              FAILED_PROJECTS="$FAILED_PROJECTS$project,"
            fi
          done
          echo "FAILED_PROJECTS=$FAILED_PROJECTS" >> $GITHUB_ENV

      - name: Publish packages
        if: steps.modified-projects.outputs.modified-files != ''
        run: |
          # Publishes all built packages.
          echo -e "\033[36mPublishing generated .nupkg files...\033[0m"
          FAILED_PROJECTS=$(echo ${{ env.FAILED_PROJECTS }})
          for package in $(find ./nupkg -name '*.nupkg'); do
            echo -e "\033[35mPublishing file $package...\033[0m"
            if dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate; then
              echo -e "\033[32mPackage $package published successfully.\033[0m"
            else
              FAILED_PROJECTS="$FAILED_PROJECTS$package,"
            fi
          done
          echo "FAILED_PROJECTS=$FAILED_PROJECTS" >> $GITHUB_ENV

      - name: Output failure
        if: env.FAILED_PROJECTS != ''
        run: |
          # Outputs all failed projects in the console and fails the process.
          FAILED_PROJECTS=$(echo ${{ env.FAILED_PROJECTS }} | sed 's/,$//')
          echo "::error::The following projects failed to pack/publish: $FAILED_PROJECTS"
          exit 1
